<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Artwork_Image" xml:space="preserve">
    <value>Artwork Image</value>
  </data>
  <data name="Artwork_Status" xml:space="preserve">
    <value>Artwork Status</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="copyright_error" xml:space="preserve">
    <value>You must be the copyright owner to post an artwork</value>
  </data>
  <data name="Empty_Error" xml:space="preserve">
    <value>Value Cannot be Empty</value>
  </data>
  <data name="Image_cannot_be_empty" xml:space="preserve">
    <value>Image cannot be empty</value>
  </data>
  <data name="keyword_lenght_error" xml:space="preserve">
    <value>Enter 5-12 Keywords</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="SelectImage" xml:space="preserve">
    <value>Select Image</value>
  </data>
  <data name="select_category_str" xml:space="preserve">
    <value>Select a category and subject to help collectors find your work</value>
  </data>
  <data name="select_subject" xml:space="preserve">
    <value>select subject and category</value>
  </data>
  <data name="step10_next_click" xml:space="preserve">
    <value />
  </data>
  <data name="step10_pre_click" xml:space="preserve">
    <value />
  </data>
  <data name="step1_next_click" xml:space="preserve">
    <value>Category &amp; Subject</value>
  </data>
  <data name="step2_next_click" xml:space="preserve">
    <value>Artwork Status</value>
  </data>
  <data name="step2_pre_click" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="step3_copyright_string" xml:space="preserve">
    <value>Are you the copyright owner of this artwork?</value>
  </data>
  <data name="step3_detail" xml:space="preserve">
    <value>Let us know how you'd like to sell your artwork</value>
  </data>
  <data name="step3_forsale_string" xml:space="preserve">
    <value>Is the original artwork for sale?</value>
  </data>
  <data name="step3_next_click" xml:space="preserve">
    <value>Artwork Image</value>
  </data>
  <data name="step3_pre_click" xml:space="preserve">
    <value>Category  &amp; Subject</value>
  </data>
  <data name="step3_print_avaible_string" xml:space="preserve">
    <value>Would you like to make it available for prints?</value>
  </data>
  <data name="step3_year_string" xml:space="preserve">
    <value>Which year did you create this artwork?</value>
  </data>
  <data name="step4_detail" xml:space="preserve">
    <value>Modify your image to adjust how you want your artwork to display across the site.</value>
  </data>
  <data name="step4_next_click" xml:space="preserve">
    <value>Mediums, Materials, &amp; Styles</value>
  </data>
  <data name="step4_pre_click" xml:space="preserve">
    <value>Artwork Status</value>
  </data>
  <data name="step5_next_click" xml:space="preserve">
    <value>Dimensions</value>
  </data>
  <data name="step5_pre_click" xml:space="preserve">
    <value>Artwork Image</value>
  </data>
  <data name="step6_next_click" xml:space="preserve">
    <value />
  </data>
  <data name="step6_pre_click" xml:space="preserve">
    <value />
  </data>
  <data name="step7_next_click" xml:space="preserve">
    <value />
  </data>
  <data name="step7_pre_click" xml:space="preserve">
    <value />
  </data>
  <data name="step8_next_click" xml:space="preserve">
    <value />
  </data>
  <data name="step8_pre_click" xml:space="preserve">
    <value />
  </data>
  <data name="step9_next_click" xml:space="preserve">
    <value />
  </data>
  <data name="step9_pre_click" xml:space="preserve">
    <value />
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="Upload" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="upload_string" xml:space="preserve">
    <value>Upload an image file which is at least 1200 x 1500 pixels and less than 50MB.</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="step5_description" xml:space="preserve">
    <value>Tell us more about your artwork</value>
  </data>
  <data name="step5_keywords" xml:space="preserve">
    <value>Keywords</value>
  </data>
  <data name="step5_keywords_detail" xml:space="preserve">
    <value>Tagging your artwork with keywords allows collectors to find your artwork more easily. It’s best to enter simple, descriptive words that describe the key visual elements of the work, such as color, subject matter, and artistic style.</value>
  </data>
  <data name="step5_keywords_lable" xml:space="preserve">
    <value>Enter 5-12 Keywords</value>
  </data>
  <data name="step5_materials" xml:space="preserve">
    <value>Select 1-5 Materials</value>
  </data>
  <data name="step5_mediums" xml:space="preserve">
    <value>Select 1-5 Mediums</value>
  </data>
  <data name="step5_styles" xml:space="preserve">
    <value>Select 1-5 Styles</value>
  </data>
  <data name="step5_title" xml:space="preserve">
    <value>Mediums, Materials &amp; Styles</value>
  </data>
</root>